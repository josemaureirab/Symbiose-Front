{"remainingRequest":"/Users/josemaureirabadilla/Desktop/ProyectoTingesoFrontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/josemaureirabadilla/Desktop/ProyectoTingesoFrontend/src/components/reservation/roomReservation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/josemaureirabadilla/Desktop/ProyectoTingesoFrontend/src/components/reservation/roomReservation.vue","mtime":1560899731292},{"path":"/Users/josemaureirabadilla/Desktop/ProyectoTingesoFrontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josemaureirabadilla/Desktop/ProyectoTingesoFrontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/josemaureirabadilla/Desktop/ProyectoTingesoFrontend/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/josemaureirabadilla/Desktop/ProyectoTingesoFrontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josemaureirabadilla/Desktop/ProyectoTingesoFrontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport moment from 'moment'\nimport { mapState, mapActions } from 'vuex'\nimport { validationMixin } from 'vuelidate'\nimport { required, maxLength, email } from 'vuelidate/lib/validators'\n\nexport default {\n  name: 'reserved-room',\n  data(){\n\t\treturn{\n      today: '',\n      minDate: '',\n      date: '',\n      menu: '',\n      start: '',\n      checkbox: '',\n      dictionary: {\n        custom: {\n          tipo: {\n            required: () => 'Debe elegir un tipo de habitación',\n            // custom messages\n          },            \n          precioMin: {\n            required: () => 'El campo nombre no puede estar vacío',\n            max: 'La cantidad de caracteres en el campo no puede ser mayor a 20'\n            // custom messages\n          },\n          status: {\n            required: () => 'Debe elegir una opción',\n            // custom messages\n          },         \n          checkbox: {\n            required: 'La confirmación es requerida'\n          }\n        }\n      }\n    }\n\t},\n  mixins: [validationMixin],\n  validations: {\n    checkbox: {\n      checked (val) {\n        return val\n      }\n    }\n  },\n  $_veeValidate: {\n    validator: 'new'\n  },  \n  created() {\n    this.getReservedRooms();\n    this.getRooms();\n    this.reservationId = this.$route.params.id;\n    this.today = moment().format(\"YYYY-MM-DD\").toString();\n  },\n  mounted() {\n    this.$validator.localize('en', this.dictionary);\n  },\n\tmethods: {\n    ...mapActions([\n      'filter',\n      'getRooms',\n      'getReservedRooms',\n      'storeReservedRoom',\n    ]),\n    getFilteredRooms() {\n      if(this.reservedRoom.dateIni){\n        this.minDate =  this.reservedRoom.dateIni.toString();\n      }\n      if(this.minPrice != '' && this.maxPrice != '' && this.type != '' && this.reservedRoom.dateIni != null && this.reservedRoom.dateOut != null) {\n        this.filter();\n      }\n    },\n    reloadPage(){\n      window.location.reload()\n    },\n    submit() {\n      console.log(this.reservedRoomIndicator);\n      if(this.$validator.validateAll()){\n        this.storeReservedRoom();\n      }     \n    },\n    clear() {\n      this.checkbox = null\n      this.$validator.reset()\n    }\n  },\n\tcomputed: {\n    ...mapState([\n      'serverURL',\n      'reservationdId',\n      'reservedRoomIndicator',\n      'reservedRoom',\n      'type',\n      'minPrice',\n      'maxPrice',\n      'rooms',\n      'room',\n      'roomId',\n      'filtredRooms',\n      'itemsType'\n    ]),\n    reservedRoomIndicator: {\n      get () {\n        return this.$store.state.reservedRoomIndicator;\n      },\n      set (payload) {\n        this.$store.commit('updateReservedRoomIndicator', payload)\n      }\n    },\n    room: {\n      get () {\n        return this.$store.state.room;\n      },\n      set (payload) {\n        this.$store.commit('updateroom', payload)\n      }\n    },\n    reservationId: {\n      get () {\n        return this.$store.state.reservationId;\n      },\n      set (payload) {\n        this.$store.commit('updateReservationId', payload)\n      }\n    },\n    type: {\n      get () {\n        return this.$store.state.type;\n      },\n      set (payload) {\n        this.$store.commit('updateType', payload)\n      }\n    },\n    capacity: {\n      get () {\n        return this.$store.state.capacity;\n      },\n      set (payload) {\n        this.$store.commit('updateCapacity', payload)\n      }\n    },\n    smoke: {\n      get () {\n        return this.$store.state.smoke;\n      },\n      set (payload) {\n        this.$store.commit('updateSmoke', payload)\n      }\n    },\n    minPrice: {\n      get () {\n        return this.$store.state.minPrice;\n      },\n      set (payload) {\n        this.$store.commit('updateMinPrice', payload)\n      }\n    },\n    maxPrice: {\n      get () {\n        return this.$store.state.maxPrice;\n      },\n      set (payload) {\n        this.$store.commit('updateMaxPrice', payload)\n      }\n    },\n    dateIni: {\n      get () {\n        return this.$store.state.dateIni;\n      },\n      set (payload) {\n        this.$store.commit('updateDateIni', payload)\n      }\n    },\n    dateOut: {\n      get () {\n        return this.$store.state.dateOut;\n      },\n      set (payload) {\n        this.$store.commit('updateDateOut', payload)\n      }\n    },\n    number: {\n      get () {\n        return this.$store.state.number;\n      },\n      set (payload) {\n        this.$store.commit('updateNumber', payload)\n      }\n    },\n    status: {\n      get () {\n        return this.$store.state.status;\n      },\n      set (payload) {\n        this.$store.commit('updateStatus', payload)\n      }\n    },\n    checkboxErrors () {\n      const errors = []\n      if (!this.$v.checkbox.$dirty) return errors\n      !this.$v.checkbox.checked && errors.push('La confirmación es requerida')\n      return errors\n    }\n  }  \n  ,\n}\n",{"version":3,"sources":["roomReservation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"roomReservation.vue","sourceRoot":"src/components/reservation","sourcesContent":["<template>\n  <div id=\"reservation-room\">\n    <v-container fluid>\n    <form @submit.prevent=\"submit()\">\n\t\t\t\t<v-select\n          v-model=\"type\"\n          v-validate=\"'required'\"\n          :items=\"itemsType\"\n          placeholder=\"Simple\"\n          label=\"Tipo de habitación\"\n          data-vv-name=\"tipo\"\n          required\n          v-on:change=\"getFilteredRooms\"\n        ></v-select>  \n        <v-text-field\n\t\t\t\t\ttype=\"number\"\n          v-model=\"minPrice\"\n          v-validate=\"'required|max:20'\"\n          :counter=\"20\"\n          :error-messages=\"errors.collect('precio_min')\"\n          placeholder=0\n          label=\"Precio mínimo\"\n          data-vv-name=\"precioMin\"\n          required\n          v-on:change=\"getFilteredRooms\"\n        ></v-text-field>\n\t\t\t\t<v-text-field\n\t\t\t\t\ttype=\"number\"\n          v-model=\"maxPrice\"\n          v-validate=\"'required|max:20'\"\n          :counter=\"20\"\n          :error-messages=\"errors.collect('precio_max')\"\n          placeholder=99999999\n          label=\"Precio máximo\"\n          data-vv-name=\"Precio máximo\"\n          required\n          v-on:change=\"getFilteredRooms\"\n        ></v-text-field>\t\t\t\t\n        <v-layout row wrap>\n          <v-flex xs12 sm6 md4>\n            <v-menu\n              ref=\"inicio\"\n              v-model=\"start\"\n              :close-on-content-click=\"false\"\n              :nudge-right=\"40\"\n              :return-value.sync=\"date\"\n              lazy\n              transition=\"scale-transition\"\n              offset-y\n              required\n              full-width\n              min-width=\"290px\"\n              v-on:change=\"getFilteredRooms\"\n              :min=\"today\"\n            >\n              <template v-slot:activator=\"{ on }\">\n                <v-text-field\n                  v-model=\"reservedRoom.dateIni\"\n                  label=\"Fecha de Ingreso\"\n                  prepend-icon=\"event\"\n                  required\n                  v-on=\"on\"\n                  :min=\"today\"\n                  v-on:change=\"getFilteredRooms\"\n                ></v-text-field>             \n              </template>\n              <v-date-picker \n              v-model=\"reservedRoom.dateIni\" \n              :min=\"today\"\n              no-title\n              required \n              scrollable\n              v-on:change=\"getFilteredRooms\"\n              >\n                <v-spacer></v-spacer>\n                <v-btn flat color=\"primary\" @click=\"inicio = false\">Cancel</v-btn>\n                <v-btn flat color=\"primary\" @click=\"$refs.inicio.save(date)\">OK</v-btn>\n              </v-date-picker>\n            </v-menu>\n          </v-flex>\n        </v-layout>\n        <v-layout row wrap>\n          <v-flex xs12 sm6 md4>\n            <v-menu\n              ref=\"menu\"\n              v-model=\"menu\"\n              :close-on-content-click=\"false\"\n              :nudge-right=\"40\"\n              :return-value.sync=\"date\"\n              lazy\n              transition=\"scale-transition\"\n              offset-y\n              full-width\n              min-width=\"290px\"\n              required\n              :min=\"minDate\"\n              v-on:change=\"getFilteredRooms\"\n            >\n              <template v-slot:activator=\"{ on }\">\n                <v-text-field\n                  v-model=\"reservedRoom.dateOut\"\n                  label=\"Fecha de salida\"\n                  prepend-icon=\"event\"\n                  required\n                  :min=\"minDate\"\n                  v-on=\"on\"\n                  v-on:change=\"getFilteredRooms\"\n                ></v-text-field>     \n              </template>\n              <v-date-picker \n              v-model=\"reservedRoom.dateOut\" \n              no-title \n              required \n              scrollable\n              :min=\"minDate\"\n              v-on:change=\"getFilteredRooms\"\n              >\n                <v-spacer></v-spacer>\n                <v-btn flat color=\"primary\" @click=\"menu = false\">Cancel</v-btn>\n                <v-btn flat color=\"primary\" @click=\"$refs.menu.save(date)\">OK</v-btn>\n              </v-date-picker>\n            </v-menu>\n          </v-flex>\n        </v-layout>    \n\n        <v-autocomplete\n          label=\"Selecciona la habitación\"\n          :items=\"filtredRooms\"\n          v-model=\"reservedRoom.room\"\n          item-text=\"`${data.item.number}`\"\n          item-value=\"`${data.item.number}`\"\n          :menu-props=\"{maxHeight:'auto'}\"\n          v-on:click=\"getFilteredRooms\"\n        >\n          <template slot=\"selection\" slot-scope=\"data\">\n            {{ data.item.number}}\n          </template>\n          <template slot=\"item\" slot-scope=\"data\">\n              <v-list-tile-content>\n                <v-list-tile-title v-html=\"`${data.item.number}`\">\n                </v-list-tile-title>\n              </v-list-tile-content>\n            </template>\n        </v-autocomplete>\n        <v-btn block color=\"primary\" type=\"submit\" @click=\"reservedRoomIndicator = false\">\n\t\t\t\t\t<span>Finalizar reserva y seguir reservando</span><v-icon>redo</v-icon>\n\t\t\t\t</v-btn>\n        <v-divider class=\"my-4\"></v-divider>\n        <center>\n          <v-btn color=\"success\" type=\"submit\" @click=\"reservedRoomIndicator = true\">\n            <span>Finalizar Reserva</span> <v-icon>check</v-icon>\n          </v-btn>\n          <v-btn dark color=\"red\" to=\"/\">\n            <span>Cancelar Reserva</span> <v-icon>cancel</v-icon>\n          </v-btn>\n        </center>\n      </form>\n    </v-container>\n  </div>\n</template>\n\n<script>\n\nimport moment from 'moment'\nimport { mapState, mapActions } from 'vuex'\nimport { validationMixin } from 'vuelidate'\nimport { required, maxLength, email } from 'vuelidate/lib/validators'\n\nexport default {\n  name: 'reserved-room',\n  data(){\n\t\treturn{\n      today: '',\n      minDate: '',\n      date: '',\n      menu: '',\n      start: '',\n      checkbox: '',\n      dictionary: {\n        custom: {\n          tipo: {\n            required: () => 'Debe elegir un tipo de habitación',\n            // custom messages\n          },            \n          precioMin: {\n            required: () => 'El campo nombre no puede estar vacío',\n            max: 'La cantidad de caracteres en el campo no puede ser mayor a 20'\n            // custom messages\n          },\n          status: {\n            required: () => 'Debe elegir una opción',\n            // custom messages\n          },         \n          checkbox: {\n            required: 'La confirmación es requerida'\n          }\n        }\n      }\n    }\n\t},\n  mixins: [validationMixin],\n  validations: {\n    checkbox: {\n      checked (val) {\n        return val\n      }\n    }\n  },\n  $_veeValidate: {\n    validator: 'new'\n  },  \n  created() {\n    this.getReservedRooms();\n    this.getRooms();\n    this.reservationId = this.$route.params.id;\n    this.today = moment().format(\"YYYY-MM-DD\").toString();\n  },\n  mounted() {\n    this.$validator.localize('en', this.dictionary);\n  },\n\tmethods: {\n    ...mapActions([\n      'filter',\n      'getRooms',\n      'getReservedRooms',\n      'storeReservedRoom',\n    ]),\n    getFilteredRooms() {\n      if(this.reservedRoom.dateIni){\n        this.minDate =  this.reservedRoom.dateIni.toString();\n      }\n      if(this.minPrice != '' && this.maxPrice != '' && this.type != '' && this.reservedRoom.dateIni != null && this.reservedRoom.dateOut != null) {\n        this.filter();\n      }\n    },\n    reloadPage(){\n      window.location.reload()\n    },\n    submit() {\n      console.log(this.reservedRoomIndicator);\n      if(this.$validator.validateAll()){\n        this.storeReservedRoom();\n      }     \n    },\n    clear() {\n      this.checkbox = null\n      this.$validator.reset()\n    }\n  },\n\tcomputed: {\n    ...mapState([\n      'serverURL',\n      'reservationdId',\n      'reservedRoomIndicator',\n      'reservedRoom',\n      'type',\n      'minPrice',\n      'maxPrice',\n      'rooms',\n      'room',\n      'roomId',\n      'filtredRooms',\n      'itemsType'\n    ]),\n    reservedRoomIndicator: {\n      get () {\n        return this.$store.state.reservedRoomIndicator;\n      },\n      set (payload) {\n        this.$store.commit('updateReservedRoomIndicator', payload)\n      }\n    },\n    room: {\n      get () {\n        return this.$store.state.room;\n      },\n      set (payload) {\n        this.$store.commit('updateroom', payload)\n      }\n    },\n    reservationId: {\n      get () {\n        return this.$store.state.reservationId;\n      },\n      set (payload) {\n        this.$store.commit('updateReservationId', payload)\n      }\n    },\n    type: {\n      get () {\n        return this.$store.state.type;\n      },\n      set (payload) {\n        this.$store.commit('updateType', payload)\n      }\n    },\n    capacity: {\n      get () {\n        return this.$store.state.capacity;\n      },\n      set (payload) {\n        this.$store.commit('updateCapacity', payload)\n      }\n    },\n    smoke: {\n      get () {\n        return this.$store.state.smoke;\n      },\n      set (payload) {\n        this.$store.commit('updateSmoke', payload)\n      }\n    },\n    minPrice: {\n      get () {\n        return this.$store.state.minPrice;\n      },\n      set (payload) {\n        this.$store.commit('updateMinPrice', payload)\n      }\n    },\n    maxPrice: {\n      get () {\n        return this.$store.state.maxPrice;\n      },\n      set (payload) {\n        this.$store.commit('updateMaxPrice', payload)\n      }\n    },\n    dateIni: {\n      get () {\n        return this.$store.state.dateIni;\n      },\n      set (payload) {\n        this.$store.commit('updateDateIni', payload)\n      }\n    },\n    dateOut: {\n      get () {\n        return this.$store.state.dateOut;\n      },\n      set (payload) {\n        this.$store.commit('updateDateOut', payload)\n      }\n    },\n    number: {\n      get () {\n        return this.$store.state.number;\n      },\n      set (payload) {\n        this.$store.commit('updateNumber', payload)\n      }\n    },\n    status: {\n      get () {\n        return this.$store.state.status;\n      },\n      set (payload) {\n        this.$store.commit('updateStatus', payload)\n      }\n    },\n    checkboxErrors () {\n      const errors = []\n      if (!this.$v.checkbox.$dirty) return errors\n      !this.$v.checkbox.checked && errors.push('La confirmación es requerida')\n      return errors\n    }\n  }  \n  ,\n}\n</script>\n"]}]}