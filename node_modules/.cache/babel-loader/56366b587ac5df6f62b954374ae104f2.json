{"remainingRequest":"/Users/josemaureirabadilla/Desktop/Symbiose-FrontEnd/node_modules/babel-loader/lib/index.js!/Users/josemaureirabadilla/Desktop/Symbiose-FrontEnd/node_modules/vuetify-loader/lib/loader.js!/Users/josemaureirabadilla/Desktop/Symbiose-FrontEnd/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/josemaureirabadilla/Desktop/Symbiose-FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/josemaureirabadilla/Desktop/Symbiose-FrontEnd/src/components/reservation/roomReservation.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/josemaureirabadilla/Desktop/Symbiose-FrontEnd/src/components/reservation/roomReservation.vue","mtime":1560899731292},{"path":"/Users/josemaureirabadilla/Desktop/Symbiose-FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josemaureirabadilla/Desktop/Symbiose-FrontEnd/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/josemaureirabadilla/Desktop/Symbiose-FrontEnd/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/josemaureirabadilla/Desktop/Symbiose-FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josemaureirabadilla/Desktop/Symbiose-FrontEnd/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.filter\";\nimport _objectSpread from \"/Users/josemaureirabadilla/Desktop/Symbiose-FrontEnd/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport { mapState, mapActions } from 'vuex';\nimport { validationMixin } from 'vuelidate';\nimport { required, maxLength, email } from 'vuelidate/lib/validators';\nexport default {\n  name: 'reserved-room',\n  data: function data() {\n    return {\n      today: '',\n      minDate: '',\n      date: '',\n      menu: '',\n      start: '',\n      checkbox: '',\n      dictionary: {\n        custom: {\n          tipo: {\n            required: function required() {\n              return 'Debe elegir un tipo de habitación';\n            } // custom messages\n\n          },\n          precioMin: {\n            required: function required() {\n              return 'El campo nombre no puede estar vacío';\n            },\n            max: 'La cantidad de caracteres en el campo no puede ser mayor a 20' // custom messages\n\n          },\n          status: {\n            required: function required() {\n              return 'Debe elegir una opción';\n            } // custom messages\n\n          },\n          checkbox: {\n            required: 'La confirmación es requerida'\n          }\n        }\n      }\n    };\n  },\n  mixins: [validationMixin],\n  validations: {\n    checkbox: {\n      checked: function checked(val) {\n        return val;\n      }\n    }\n  },\n  $_veeValidate: {\n    validator: 'new'\n  },\n  created: function created() {\n    this.getReservedRooms();\n    this.getRooms();\n    this.reservationId = this.$route.params.id;\n    this.today = moment().format(\"YYYY-MM-DD\").toString();\n  },\n  mounted: function mounted() {\n    this.$validator.localize('en', this.dictionary);\n  },\n  methods: _objectSpread({}, mapActions(['filter', 'getRooms', 'getReservedRooms', 'storeReservedRoom']), {\n    getFilteredRooms: function getFilteredRooms() {\n      if (this.reservedRoom.dateIni) {\n        this.minDate = this.reservedRoom.dateIni.toString();\n      }\n\n      if (this.minPrice != '' && this.maxPrice != '' && this.type != '' && this.reservedRoom.dateIni != null && this.reservedRoom.dateOut != null) {\n        this.filter();\n      }\n    },\n    reloadPage: function reloadPage() {\n      window.location.reload();\n    },\n    submit: function submit() {\n      console.log(this.reservedRoomIndicator);\n\n      if (this.$validator.validateAll()) {\n        this.storeReservedRoom();\n      }\n    },\n    clear: function clear() {\n      this.checkbox = null;\n      this.$validator.reset();\n    }\n  }),\n  computed: _objectSpread({}, mapState(['serverURL', 'reservationdId', 'reservedRoomIndicator', 'reservedRoom', 'type', 'minPrice', 'maxPrice', 'rooms', 'room', 'roomId', 'filtredRooms', 'itemsType']), {\n    reservedRoomIndicator: {\n      get: function get() {\n        return this.$store.state.reservedRoomIndicator;\n      },\n      set: function set(payload) {\n        this.$store.commit('updateReservedRoomIndicator', payload);\n      }\n    },\n    room: {\n      get: function get() {\n        return this.$store.state.room;\n      },\n      set: function set(payload) {\n        this.$store.commit('updateroom', payload);\n      }\n    },\n    reservationId: {\n      get: function get() {\n        return this.$store.state.reservationId;\n      },\n      set: function set(payload) {\n        this.$store.commit('updateReservationId', payload);\n      }\n    },\n    type: {\n      get: function get() {\n        return this.$store.state.type;\n      },\n      set: function set(payload) {\n        this.$store.commit('updateType', payload);\n      }\n    },\n    capacity: {\n      get: function get() {\n        return this.$store.state.capacity;\n      },\n      set: function set(payload) {\n        this.$store.commit('updateCapacity', payload);\n      }\n    },\n    smoke: {\n      get: function get() {\n        return this.$store.state.smoke;\n      },\n      set: function set(payload) {\n        this.$store.commit('updateSmoke', payload);\n      }\n    },\n    minPrice: {\n      get: function get() {\n        return this.$store.state.minPrice;\n      },\n      set: function set(payload) {\n        this.$store.commit('updateMinPrice', payload);\n      }\n    },\n    maxPrice: {\n      get: function get() {\n        return this.$store.state.maxPrice;\n      },\n      set: function set(payload) {\n        this.$store.commit('updateMaxPrice', payload);\n      }\n    },\n    dateIni: {\n      get: function get() {\n        return this.$store.state.dateIni;\n      },\n      set: function set(payload) {\n        this.$store.commit('updateDateIni', payload);\n      }\n    },\n    dateOut: {\n      get: function get() {\n        return this.$store.state.dateOut;\n      },\n      set: function set(payload) {\n        this.$store.commit('updateDateOut', payload);\n      }\n    },\n    number: {\n      get: function get() {\n        return this.$store.state.number;\n      },\n      set: function set(payload) {\n        this.$store.commit('updateNumber', payload);\n      }\n    },\n    status: {\n      get: function get() {\n        return this.$store.state.status;\n      },\n      set: function set(payload) {\n        this.$store.commit('updateStatus', payload);\n      }\n    },\n    checkboxErrors: function checkboxErrors() {\n      var errors = [];\n      if (!this.$v.checkbox.$dirty) return errors;\n      !this.$v.checkbox.checked && errors.push('La confirmación es requerida');\n      return errors;\n    }\n  })\n};",{"version":3,"sources":["roomReservation.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"reservation-room\">\n    <v-container fluid>\n    <form @submit.prevent=\"submit()\">\n\t\t\t\t<v-select\n          v-model=\"type\"\n          v-validate=\"'required'\"\n          :items=\"itemsType\"\n          placeholder=\"Simple\"\n          label=\"Tipo de habitación\"\n          data-vv-name=\"tipo\"\n          required\n          v-on:change=\"getFilteredRooms\"\n        ></v-select>  \n        <v-text-field\n\t\t\t\t\ttype=\"number\"\n          v-model=\"minPrice\"\n          v-validate=\"'required|max:20'\"\n          :counter=\"20\"\n          :error-messages=\"errors.collect('precio_min')\"\n          placeholder=0\n          label=\"Precio mínimo\"\n          data-vv-name=\"precioMin\"\n          required\n          v-on:change=\"getFilteredRooms\"\n        ></v-text-field>\n\t\t\t\t<v-text-field\n\t\t\t\t\ttype=\"number\"\n          v-model=\"maxPrice\"\n          v-validate=\"'required|max:20'\"\n          :counter=\"20\"\n          :error-messages=\"errors.collect('precio_max')\"\n          placeholder=99999999\n          label=\"Precio máximo\"\n          data-vv-name=\"Precio máximo\"\n          required\n          v-on:change=\"getFilteredRooms\"\n        ></v-text-field>\t\t\t\t\n        <v-layout row wrap>\n          <v-flex xs12 sm6 md4>\n            <v-menu\n              ref=\"inicio\"\n              v-model=\"start\"\n              :close-on-content-click=\"false\"\n              :nudge-right=\"40\"\n              :return-value.sync=\"date\"\n              lazy\n              transition=\"scale-transition\"\n              offset-y\n              required\n              full-width\n              min-width=\"290px\"\n              v-on:change=\"getFilteredRooms\"\n              :min=\"today\"\n            >\n              <template v-slot:activator=\"{ on }\">\n                <v-text-field\n                  v-model=\"reservedRoom.dateIni\"\n                  label=\"Fecha de Ingreso\"\n                  prepend-icon=\"event\"\n                  required\n                  v-on=\"on\"\n                  :min=\"today\"\n                  v-on:change=\"getFilteredRooms\"\n                ></v-text-field>             \n              </template>\n              <v-date-picker \n              v-model=\"reservedRoom.dateIni\" \n              :min=\"today\"\n              no-title\n              required \n              scrollable\n              v-on:change=\"getFilteredRooms\"\n              >\n                <v-spacer></v-spacer>\n                <v-btn flat color=\"primary\" @click=\"inicio = false\">Cancel</v-btn>\n                <v-btn flat color=\"primary\" @click=\"$refs.inicio.save(date)\">OK</v-btn>\n              </v-date-picker>\n            </v-menu>\n          </v-flex>\n        </v-layout>\n        <v-layout row wrap>\n          <v-flex xs12 sm6 md4>\n            <v-menu\n              ref=\"menu\"\n              v-model=\"menu\"\n              :close-on-content-click=\"false\"\n              :nudge-right=\"40\"\n              :return-value.sync=\"date\"\n              lazy\n              transition=\"scale-transition\"\n              offset-y\n              full-width\n              min-width=\"290px\"\n              required\n              :min=\"minDate\"\n              v-on:change=\"getFilteredRooms\"\n            >\n              <template v-slot:activator=\"{ on }\">\n                <v-text-field\n                  v-model=\"reservedRoom.dateOut\"\n                  label=\"Fecha de salida\"\n                  prepend-icon=\"event\"\n                  required\n                  :min=\"minDate\"\n                  v-on=\"on\"\n                  v-on:change=\"getFilteredRooms\"\n                ></v-text-field>     \n              </template>\n              <v-date-picker \n              v-model=\"reservedRoom.dateOut\" \n              no-title \n              required \n              scrollable\n              :min=\"minDate\"\n              v-on:change=\"getFilteredRooms\"\n              >\n                <v-spacer></v-spacer>\n                <v-btn flat color=\"primary\" @click=\"menu = false\">Cancel</v-btn>\n                <v-btn flat color=\"primary\" @click=\"$refs.menu.save(date)\">OK</v-btn>\n              </v-date-picker>\n            </v-menu>\n          </v-flex>\n        </v-layout>    \n\n        <v-autocomplete\n          label=\"Selecciona la habitación\"\n          :items=\"filtredRooms\"\n          v-model=\"reservedRoom.room\"\n          item-text=\"`${data.item.number}`\"\n          item-value=\"`${data.item.number}`\"\n          :menu-props=\"{maxHeight:'auto'}\"\n          v-on:click=\"getFilteredRooms\"\n        >\n          <template slot=\"selection\" slot-scope=\"data\">\n            {{ data.item.number}}\n          </template>\n          <template slot=\"item\" slot-scope=\"data\">\n              <v-list-tile-content>\n                <v-list-tile-title v-html=\"`${data.item.number}`\">\n                </v-list-tile-title>\n              </v-list-tile-content>\n            </template>\n        </v-autocomplete>\n        <v-btn block color=\"primary\" type=\"submit\" @click=\"reservedRoomIndicator = false\">\n\t\t\t\t\t<span>Finalizar reserva y seguir reservando</span><v-icon>redo</v-icon>\n\t\t\t\t</v-btn>\n        <v-divider class=\"my-4\"></v-divider>\n        <center>\n          <v-btn color=\"success\" type=\"submit\" @click=\"reservedRoomIndicator = true\">\n            <span>Finalizar Reserva</span> <v-icon>check</v-icon>\n          </v-btn>\n          <v-btn dark color=\"red\" to=\"/\">\n            <span>Cancelar Reserva</span> <v-icon>cancel</v-icon>\n          </v-btn>\n        </center>\n      </form>\n    </v-container>\n  </div>\n</template>\n\n<script>\n\nimport moment from 'moment'\nimport { mapState, mapActions } from 'vuex'\nimport { validationMixin } from 'vuelidate'\nimport { required, maxLength, email } from 'vuelidate/lib/validators'\n\nexport default {\n  name: 'reserved-room',\n  data(){\n\t\treturn{\n      today: '',\n      minDate: '',\n      date: '',\n      menu: '',\n      start: '',\n      checkbox: '',\n      dictionary: {\n        custom: {\n          tipo: {\n            required: () => 'Debe elegir un tipo de habitación',\n            // custom messages\n          },            \n          precioMin: {\n            required: () => 'El campo nombre no puede estar vacío',\n            max: 'La cantidad de caracteres en el campo no puede ser mayor a 20'\n            // custom messages\n          },\n          status: {\n            required: () => 'Debe elegir una opción',\n            // custom messages\n          },         \n          checkbox: {\n            required: 'La confirmación es requerida'\n          }\n        }\n      }\n    }\n\t},\n  mixins: [validationMixin],\n  validations: {\n    checkbox: {\n      checked (val) {\n        return val\n      }\n    }\n  },\n  $_veeValidate: {\n    validator: 'new'\n  },  \n  created() {\n    this.getReservedRooms();\n    this.getRooms();\n    this.reservationId = this.$route.params.id;\n    this.today = moment().format(\"YYYY-MM-DD\").toString();\n  },\n  mounted() {\n    this.$validator.localize('en', this.dictionary);\n  },\n\tmethods: {\n    ...mapActions([\n      'filter',\n      'getRooms',\n      'getReservedRooms',\n      'storeReservedRoom',\n    ]),\n    getFilteredRooms() {\n      if(this.reservedRoom.dateIni){\n        this.minDate =  this.reservedRoom.dateIni.toString();\n      }\n      if(this.minPrice != '' && this.maxPrice != '' && this.type != '' && this.reservedRoom.dateIni != null && this.reservedRoom.dateOut != null) {\n        this.filter();\n      }\n    },\n    reloadPage(){\n      window.location.reload()\n    },\n    submit() {\n      console.log(this.reservedRoomIndicator);\n      if(this.$validator.validateAll()){\n        this.storeReservedRoom();\n      }     \n    },\n    clear() {\n      this.checkbox = null\n      this.$validator.reset()\n    }\n  },\n\tcomputed: {\n    ...mapState([\n      'serverURL',\n      'reservationdId',\n      'reservedRoomIndicator',\n      'reservedRoom',\n      'type',\n      'minPrice',\n      'maxPrice',\n      'rooms',\n      'room',\n      'roomId',\n      'filtredRooms',\n      'itemsType'\n    ]),\n    reservedRoomIndicator: {\n      get () {\n        return this.$store.state.reservedRoomIndicator;\n      },\n      set (payload) {\n        this.$store.commit('updateReservedRoomIndicator', payload)\n      }\n    },\n    room: {\n      get () {\n        return this.$store.state.room;\n      },\n      set (payload) {\n        this.$store.commit('updateroom', payload)\n      }\n    },\n    reservationId: {\n      get () {\n        return this.$store.state.reservationId;\n      },\n      set (payload) {\n        this.$store.commit('updateReservationId', payload)\n      }\n    },\n    type: {\n      get () {\n        return this.$store.state.type;\n      },\n      set (payload) {\n        this.$store.commit('updateType', payload)\n      }\n    },\n    capacity: {\n      get () {\n        return this.$store.state.capacity;\n      },\n      set (payload) {\n        this.$store.commit('updateCapacity', payload)\n      }\n    },\n    smoke: {\n      get () {\n        return this.$store.state.smoke;\n      },\n      set (payload) {\n        this.$store.commit('updateSmoke', payload)\n      }\n    },\n    minPrice: {\n      get () {\n        return this.$store.state.minPrice;\n      },\n      set (payload) {\n        this.$store.commit('updateMinPrice', payload)\n      }\n    },\n    maxPrice: {\n      get () {\n        return this.$store.state.maxPrice;\n      },\n      set (payload) {\n        this.$store.commit('updateMaxPrice', payload)\n      }\n    },\n    dateIni: {\n      get () {\n        return this.$store.state.dateIni;\n      },\n      set (payload) {\n        this.$store.commit('updateDateIni', payload)\n      }\n    },\n    dateOut: {\n      get () {\n        return this.$store.state.dateOut;\n      },\n      set (payload) {\n        this.$store.commit('updateDateOut', payload)\n      }\n    },\n    number: {\n      get () {\n        return this.$store.state.number;\n      },\n      set (payload) {\n        this.$store.commit('updateNumber', payload)\n      }\n    },\n    status: {\n      get () {\n        return this.$store.state.status;\n      },\n      set (payload) {\n        this.$store.commit('updateStatus', payload)\n      }\n    },\n    checkboxErrors () {\n      const errors = []\n      if (!this.$v.checkbox.$dirty) return errors\n      !this.$v.checkbox.checked && errors.push('La confirmación es requerida')\n      return errors\n    }\n  }  \n  ,\n}\n</script>\n"],"sourceRoot":"src/components/reservation"}]}