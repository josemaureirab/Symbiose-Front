{"map":"{\"version\":3,\"sources\":[\"/Users/josemaureirabadilla/Desktop/ProyectoTingesoFrontend/node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js\",\"/Users/josemaureirabadilla/Desktop/ProyectoTingesoFrontend/node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js\",\"/Users/josemaureirabadilla/Desktop/ProyectoTingesoFrontend/node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js\"],\"names\":[\"__webpack_require__\",\"d\",\"__webpack_exports__\",\"Percent\",\"percent\",\"isPercent\",\"this\",\"_value\",\"Object\",\"defineProperty\",\"prototype\",\"get\",\"enumerable\",\"configurable\",\"toString\",\"value\",\"isNaN\",\"castString\",\"toBoolean\",\"toNumber\",\"toText\",\"toNumberOrPercent\",\"hasValue\",\"getValue\",\"getValueDefault\",\"isDate\",\"isString\",\"isNumber\",\"isObject\",\"isArray\",\"_Percent__WEBPACK_IMPORTED_MODULE_0__\",\"Number\",\"getType\",\"call\",\"Error\",\"converted\",\"replace\",\"indexOf\",\"a\",\"defaultValue\",\"Array\",\"PI\",\"HALFPI\",\"RADIANS\",\"DEGREES\",\"toNumberRange\",\"round\",\"ceil\",\"fitToRange\",\"sin\",\"tan\",\"cos\",\"max\",\"min\",\"closest\",\"intersect\",\"invertRange\",\"intersection\",\"getDistance\",\"getScale\",\"getMidPoint\",\"getAngle\",\"getBBox\",\"getCommonRectangle\",\"getPointOnQuadraticCurve\",\"getPointOnCubicCurve\",\"getCubicControlPointA\",\"getCubicControlPointB\",\"normalizeAngle\",\"fitAngleToRange\",\"getArcRect\",\"isInRectangle\",\"_Type__WEBPACK_IMPORTED_MODULE_0__\",\"Math\",\"precision\",\"floor\",\"rounded\",\"pow\",\"minValue\",\"maxValue\",\"temp\",\"left\",\"right\",\"values\",\"referenceValue\",\"reduce\",\"prev\",\"curr\",\"abs\",\"range1\",\"range2\",\"start1\",\"start\",\"start2\",\"end1\",\"end\",\"end2\",\"range\",\"startMax\",\"endMin\",\"point1\",\"point2\",\"x\",\"y\",\"sqrt\",\"startPoint1\",\"startPoint2\",\"initialDistance\",\"currentDistance\",\"position\",\"diffX\",\"diffY\",\"angle\",\"atan2\",\"points\",\"length_1\",\"length\",\"top_1\",\"bottom\",\"i\",\"point\",\"width\",\"height\",\"rectangles\",\"minX\",\"minY\",\"maxX\",\"maxY\",\"rectangle\",\"pointA\",\"pointB\",\"controlPoint\",\"controlPointA\",\"controlPointB\",\"mt1\",\"mt2\",\"mt3\",\"p0\",\"p1\",\"p2\",\"p3\",\"tensionX\",\"tensionY\",\"adjustTension\",\"tension\",\"startAngle\",\"endAngle\",\"count\",\"maxEnd\",\"maxStart\",\"radius\",\"MAX_VALUE\",\"bpoints\",\"push\",\"getArcPoint\",\"fromAngle\",\"toAngle\",\"pt\",\"arc\"],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\r\\n * ============================================================================\\r\\n * MAIN CLASS\\r\\n * ============================================================================\\r\\n * @hidden\\r\\n */\\r\\n/**\\r\\n * Represents a relative value (percent).\\r\\n *\\r\\n * The Percent object, can be instantiated using two ways:\\r\\n *\\r\\n * * Via `new Percent(X)`.\\r\\n * * Via `am4core.percent(X)`.\\r\\n *\\r\\n * `Percent` type objects can be used in a number of dual-measuring or\\r\\n * positioning properties, like `width`. E.g.:\\r\\n *\\r\\n * ```TypeScript\\r\\n * chart.paddingRight = new Percent(10);\\r\\n * // or\\r\\n * chart.paddingRight = am4core.percent(10);\\r\\n * ```\\r\\n * ```JavaScript\\r\\n * chart.paddingRight = new Percent(10);\\r\\n * // or\\r\\n * chart.paddingRight = am4core.percent(10);\\r\\n * ```\\r\\n * ```JSON\\r\\n * {\\r\\n *   // ...\\r\\n *   \\\"paddingRight\\\": \\\"10%\\\"\\r\\n * }\\r\\n * ```\\r\\n */\\r\\nvar Percent = /** @class */ (function () {\\r\\n    /**\\r\\n     * Constructor.\\r\\n     *\\r\\n     * @param percent  Percent value\\r\\n     */\\r\\n    function Percent(percent) {\\r\\n        this._value = percent;\\r\\n    }\\r\\n    Object.defineProperty(Percent.prototype, \\\"value\\\", {\\r\\n        /**\\r\\n         * Relative value.\\r\\n         *\\r\\n         * E.g. 100% is 1, 50% is 0.5, etc.\\r\\n         *\\r\\n         * This is useful to apply transformations to other values. E.g.:\\r\\n         *\\r\\n         * ```TypeScript\\r\\n         * let value = 256;\\r\\n         * let percent = new am4core.Percent(50);\\r\\n         * console.log(value * percent.value); // outputs 128\\r\\n         * ```\\r\\n         * ```JavaScript\\r\\n         * var value = 256;\\r\\n         * var percent = new am4core.Percent(50);\\r\\n         * console.log(value * percent.value); // outputs 128\\r\\n         * ```\\r\\n         *\\r\\n         * Alternatively, you can use `am4core.percent()` helper function:\\r\\n         *\\r\\n         * ```TypeScript\\r\\n         * let value = 256;\\r\\n         * let percent = am4core.percent(50);\\r\\n         * console.log(value * percent.value); // outputs 128\\r\\n         * ```\\r\\n         * ```JavaScript\\r\\n         * var value = 256;\\r\\n         * var percent = am4core.percent(50);\\r\\n         * console.log(value * percent.value); // outputs 128\\r\\n         * ```\\r\\n         *\\r\\n         * @readonly\\r\\n         * @return Relative value\\r\\n         */\\r\\n        get: function () {\\r\\n            return this._value / 100;\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Object.defineProperty(Percent.prototype, \\\"percent\\\", {\\r\\n        /**\\r\\n         * Value in percent.\\r\\n         *\\r\\n         * @return Percent\\r\\n         */\\r\\n        get: function () {\\r\\n            return this._value;\\r\\n        },\\r\\n        enumerable: true,\\r\\n        configurable: true\\r\\n    });\\r\\n    Percent.prototype.toString = function () {\\r\\n        return \\\"\\\" + this._value + \\\"%\\\";\\r\\n    };\\r\\n    return Percent;\\r\\n}());\\r\\nexport { Percent };\\r\\n/**\\r\\n * Converts numeric percent value to a proper [[Percent]] object.\\r\\n *\\r\\n * ```TypeScript\\r\\n * pieSeries.radius = am4core.percent(80);\\r\\n * ```\\r\\n * ```JavaScript\\r\\n * pieSeries.radius = am4core.percent(80);\\r\\n * ```\\r\\n *\\r\\n * @param value  Percent\\r\\n * @return Percent object\\r\\n */\\r\\nexport function percent(value) {\\r\\n    return new Percent(value);\\r\\n}\\r\\n/**\\r\\n * Checks if value is a [[Percent]] object.\\r\\n *\\r\\n * @ignore Exclude from docs\\r\\n * @param value  Input value\\r\\n * @return Is percent?\\r\\n */\\r\\nexport function isPercent(value) {\\r\\n    return value instanceof Percent;\\r\\n}\\r\\n//# sourceMappingURL=Percent.js.map\",\"/**\\r\\n * A collection of utility functions for various type checks and conversion\\r\\n * @todo Review unused functions for removal\\r\\n * @hidden\\r\\n */\\r\\n/**\\r\\n * ============================================================================\\r\\n * IMPORTS\\r\\n * ============================================================================\\r\\n * @hidden\\r\\n */\\r\\nimport { percent, isPercent } from \\\"./Percent\\\";\\r\\n/**\\r\\n * ============================================================================\\r\\n * TYPE CHECK\\r\\n * ============================================================================\\r\\n * @hidden\\r\\n */\\r\\n/**\\r\\n * Returns `true` if value is not a number (NaN).\\r\\n *\\r\\n * @param value Input value\\r\\n * @return Is NaN?\\r\\n * @deprecated Is not used anywhere. JS built-in isNaN is used everywhere. Maybe we don't need this, or if we do, then we should use it everywhere\\r\\n */\\r\\nexport function isNaN(value) {\\r\\n    return Number(value) !== value;\\r\\n}\\r\\n/**\\r\\n * Returns a type of the value.\\r\\n *\\r\\n * @param value  Input value\\r\\n * @return Type of the value\\r\\n */\\r\\nexport function getType(value) {\\r\\n    return ({}).toString.call(value);\\r\\n}\\r\\n/**\\r\\n * Returns a default value if the passed in value is empty.\\r\\n *\\r\\n * @param value     Input value\\r\\n * @param optional  Default value\\r\\n * @return Value or default value whichever is available\\r\\n * @deprecated Not used anywhere\\r\\n */\\r\\nexport function getDefault(value, optional) {\\r\\n    return value || optional;\\r\\n}\\r\\n/**\\r\\n * Checks if the passed in value is a string.\\r\\n *\\r\\n * @param value  Value\\r\\n * @return Is string?\\r\\n * @throws {Error}\\r\\n * @deprecated Not used anywhere\\r\\n */\\r\\nexport function checkString(value) {\\r\\n    if (typeof value === \\\"string\\\") {\\r\\n        return true;\\r\\n    }\\r\\n    else {\\r\\n        throw new Error(\\\"Expected a string but got \\\" + getType(value));\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * Checks if the passed in value is a boolean.\\r\\n *\\r\\n * @param value  Value\\r\\n * @return Is boolean?\\r\\n * @throws {Error}\\r\\n * @deprecated Not used anywhere\\r\\n */\\r\\nexport function checkBoolean(value) {\\r\\n    if (typeof value === \\\"boolean\\\") {\\r\\n        return true;\\r\\n    }\\r\\n    else {\\r\\n        throw new Error(\\\"Expected a boolean but got \\\" + getType(value));\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * Checks if the passed in value is a number.\\r\\n *\\r\\n * @param value  Value\\r\\n * @return Is number?\\r\\n * @throws {Error}\\r\\n */\\r\\nexport function checkNumber(value) {\\r\\n    if (typeof value === \\\"number\\\") {\\r\\n        if (isNaN(value)) {\\r\\n            throw new Error(\\\"Expected a number but got NaN\\\");\\r\\n        }\\r\\n    }\\r\\n    else {\\r\\n        throw new Error(\\\"Expected a number but got \\\" + getType(value));\\r\\n    }\\r\\n    return true;\\r\\n}\\r\\n/**\\r\\n * Checks if the passed in value is an object.\\r\\n *\\r\\n * @param value  Value\\r\\n * @return Is object?\\r\\n * @throws {Error}\\r\\n * @todo Is the input type correct?\\r\\n * @deprecated Not used anywhere\\r\\n */\\r\\nexport function checkObject(value) {\\r\\n    var t = getType(value);\\r\\n    if (t === \\\"[object Object]\\\") {\\r\\n        return true;\\r\\n    }\\r\\n    else {\\r\\n        throw new Error(\\\"Expected an object but got \\\" + t);\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * Checks if the passed in value is an array.\\r\\n *\\r\\n * @param value  Value\\r\\n * @return Is array?\\r\\n * @throws {Error}\\r\\n * @deprecated Not used anywhere\\r\\n */\\r\\nexport function checkArray(value) {\\r\\n    if (Array.isArray(value)) {\\r\\n        return true;\\r\\n    }\\r\\n    else {\\r\\n        throw new Error(\\\"Expected an array but got \\\" + getType(value));\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * Checks if the passed in value is a Date object.\\r\\n *\\r\\n * @param value  Value\\r\\n * @return Is Date object?\\r\\n * @throws {Error}\\r\\n * @deprecated Not used anywhere\\r\\n */\\r\\nexport function checkDate(value) {\\r\\n    var t = getType(value);\\r\\n    if (t === \\\"[object Date]\\\") {\\r\\n        return true;\\r\\n    }\\r\\n    else {\\r\\n        throw new Error(\\\"Expected a date but got \\\" + t);\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * ============================================================================\\r\\n * TYPE CASTING\\r\\n * ============================================================================\\r\\n * @hidden\\r\\n */\\r\\n/**\\r\\n * Casts string or a number into string.\\r\\n *\\r\\n * @param value  Input\\r\\n * @return String value\\r\\n * @deprecated Not used anywhere\\r\\n */\\r\\nexport function castString(value) {\\r\\n    if (typeof value === \\\"string\\\") {\\r\\n        return value;\\r\\n    }\\r\\n    else if (typeof value === \\\"number\\\") {\\r\\n        return \\\"\\\" + value;\\r\\n    }\\r\\n    else {\\r\\n        throw new Error(\\\"Expected a string or number but got \\\" + getType(value));\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * Casts string or a number into a number.\\r\\n *\\r\\n * @param value   Input value\\r\\n * @return Number  value\\r\\n * @throws {Error}\\r\\n */\\r\\nexport function castNumber(value) {\\r\\n    if (typeof value === \\\"string\\\") {\\r\\n        var number = +value;\\r\\n        if (isNaN(number)) {\\r\\n            throw new Error(\\\"Cannot cast string \\\" + JSON.stringify(value) + \\\" to a number\\\");\\r\\n        }\\r\\n        else {\\r\\n            return number;\\r\\n        }\\r\\n    }\\r\\n    else if (typeof value === \\\"number\\\") {\\r\\n        if (isNaN(value)) {\\r\\n            throw new Error(\\\"Expected a number but got NaN\\\");\\r\\n        }\\r\\n        else {\\r\\n            return value;\\r\\n        }\\r\\n    }\\r\\n    else {\\r\\n        var t = getType(value);\\r\\n        if (t === \\\"[object Date]\\\") {\\r\\n            return value.getTime();\\r\\n        }\\r\\n        else {\\r\\n            throw new Error(\\\"Expected a string, number, or date but got \\\" + t);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * Casts number, string or Date into a Date object.\\r\\n *\\r\\n * @param value  Input value\\r\\n * @return Date object\\r\\n * @deprecated Not used anywhere\\r\\n * @throws {Error}\\r\\n * @hidden\\r\\n * @deprecated\\r\\n */\\r\\n/*export function castDate(value: string | number | Date, formatter?: DateFormatter): Date {\\r\\n    if (typeof value === \\\"string\\\") {\\r\\n        if (formatter) {\\r\\n            return formatter.parse(value);\\r\\n        }\\r\\n        return new Date(value);\\r\\n\\r\\n    } else if (typeof value === \\\"number\\\") {\\r\\n        return new Date(value);\\r\\n\\r\\n    } else {\\r\\n        const t = getType(value);\\r\\n\\r\\n        if (t === \\\"[object Date]\\\") {\\r\\n            return value;\\r\\n\\r\\n        } else {\\r\\n            throw new Error(\\\"Expected a string, number, or date but got \\\" + t);\\r\\n        }\\r\\n    }\\r\\n}*/\\r\\n/**\\r\\n * ============================================================================\\r\\n * QUICK CONVERSION\\r\\n * ============================================================================\\r\\n * @hidden\\r\\n */\\r\\n/**\\r\\n * Converts any value into `boolean`.\\r\\n *\\r\\n * @param value  Source value\\r\\n * @return `true` or `false`\\r\\n */\\r\\nexport function toBoolean(value) {\\r\\n    return value ? true : false;\\r\\n}\\r\\n/**\\r\\n * Converts any value into a `number`.\\r\\n *\\r\\n * @param value  Source value\\r\\n * @return Number representation of value\\r\\n */\\r\\nexport function toNumber(value) {\\r\\n    if (hasValue(value) && !isNumber(value)) {\\r\\n        var converted = Number(value);\\r\\n        if (isNaN(converted) && isString(value) && value != \\\"\\\") {\\r\\n            return toNumber(value.replace(/[^0-9.\\\\-]+/g, ''));\\r\\n        }\\r\\n        return converted;\\r\\n    }\\r\\n    return value;\\r\\n}\\r\\n/**\\r\\n * Converts any value into a string (text).\\r\\n *\\r\\n * @param value  Source value\\r\\n * @return String representation of the input\\r\\n */\\r\\nexport function toText(value) {\\r\\n    if (hasValue(value) && !isString(value)) {\\r\\n        if (isNumber(value)) {\\r\\n            return castString(value);\\r\\n        }\\r\\n        else if (isObject(value)) {\\r\\n            return value.toString();\\r\\n        }\\r\\n    }\\r\\n    return value;\\r\\n}\\r\\n/**\\r\\n * Converts any value to a number or [[Percent]].\\r\\n *\\r\\n * If the parameter is a string and contains \\\"%\\\", it will\\r\\n * convert it into a [[Percent]].\\r\\n *\\r\\n * Otherwise, it will convert into a number.\\r\\n *\\r\\n * @param value  Number or percent\\r\\n * @return Percent object\\r\\n */\\r\\nexport function toNumberOrPercent(value) {\\r\\n    if (!hasValue(value) || isNumber(value) || isPercent(value)) {\\r\\n        return value;\\r\\n    }\\r\\n    if (isString(value) && value.indexOf(\\\"%\\\") != -1) {\\r\\n        return percent(toNumber(value));\\r\\n    }\\r\\n    return toNumber(value);\\r\\n}\\r\\n/**\\r\\n * Checks if a variable has a value.\\r\\n *\\r\\n * @param a  Input value\\r\\n * @returns                        Has value?\\r\\n */\\r\\nexport function hasValue(a) {\\r\\n    return a != null;\\r\\n}\\r\\n/**\\r\\n * Returns a value or throws an {Error} exception if the variable has not\\r\\n * value.\\r\\n *\\r\\n * @param a  Input value\\r\\n * @returns                        Value\\r\\n */\\r\\nexport function getValue(a) {\\r\\n    if (hasValue(a)) {\\r\\n        return a;\\r\\n    }\\r\\n    else {\\r\\n        throw new Error(\\\"Value doesn't exist\\\");\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * Returns a value, or returns the default value if it doesn't have a value.\\r\\n *\\r\\n * @param a  Input value\\r\\n * @returns                        Value\\r\\n */\\r\\nexport function getValueDefault(a, defaultValue) {\\r\\n    if (hasValue(a)) {\\r\\n        return a;\\r\\n    }\\r\\n    else {\\r\\n        return defaultValue;\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * ============================================================================\\r\\n * TYPE CHECK\\r\\n * ============================================================================\\r\\n * @hidden\\r\\n */\\r\\n/**\\r\\n * Checks if parameter is `Date`.\\r\\n *\\r\\n * @param value  Input value\\r\\n * @return Is Date?\\r\\n */\\r\\nexport function isDate(value) {\\r\\n    return getType(value) === \\\"[object Date]\\\";\\r\\n}\\r\\n/**\\r\\n * Checks if parameter is `string`.\\r\\n *\\r\\n * @param value  Input value\\r\\n * @return Is string?\\r\\n */\\r\\nexport function isString(value) {\\r\\n    return typeof value === \\\"string\\\";\\r\\n}\\r\\n/**\\r\\n * Checks if parameter is `number`.\\r\\n *\\r\\n * @param value  Input value\\r\\n * @return Is number?\\r\\n */\\r\\nexport function isNumber(value) {\\r\\n    return typeof value === \\\"number\\\" && Number(value) == value;\\r\\n}\\r\\n/**\\r\\n * Checks if parameter is `object`.\\r\\n *\\r\\n * @param value  Input value\\r\\n * @return Is object?\\r\\n */\\r\\nexport function isObject(value) {\\r\\n    return typeof value === \\\"object\\\";\\r\\n}\\r\\n/**\\r\\n * Checks if parameter is `Array`.\\r\\n *\\r\\n * @param value  Input value\\r\\n * @return Is Array?\\r\\n */\\r\\nexport function isArray(value) {\\r\\n    return Array.isArray(value);\\r\\n}\\r\\n//# sourceMappingURL=Type.js.map\",\"/**\\r\\n * A collection of Math-related functions\\r\\n *\\r\\n * @todo Comment trigonometric functions?\\r\\n */\\r\\nimport * as $type from \\\"./Type\\\";\\r\\n/**\\r\\n * ============================================================================\\r\\n * CONSTANTS\\r\\n * ============================================================================\\r\\n * @hidden\\r\\n */\\r\\nexport var PI = Math.PI;\\r\\nexport var HALFPI = PI / 2;\\r\\nexport var RADIANS = PI / 180;\\r\\nexport var DEGREES = 180 / PI;\\r\\n/**\\r\\n * Converts any value and fits it into a specific value range.\\r\\n *\\r\\n * @param value  Source value\\r\\n * @param min    Minimum allowable value\\r\\n * @param max    Maximum allowable value\\r\\n * @return Number\\r\\n */\\r\\nexport function toNumberRange(value, min, max) {\\r\\n    if ($type.hasValue(value)) {\\r\\n        value = $type.toNumber(value);\\r\\n        return fitToRange(value, min, max);\\r\\n    }\\r\\n    return value;\\r\\n}\\r\\n/**\\r\\n * Rounds the numeric value to whole number or specific precision of set.\\r\\n *\\r\\n * @param value      Value\\r\\n * @param precision  Precision (number of decimal points)\\r\\n * @param floor  In case value ends with 0.5 and precision is 0, we might need to floor the value instead of ceiling it.\\r\\n * @return Rounded value\\r\\n */\\r\\nexport function round(value, precision, floor) {\\r\\n    if (!$type.isNumber(precision) || precision <= 0) {\\r\\n        var rounded = Math.round(value);\\r\\n        if (floor) {\\r\\n            if (rounded - value == 0.5) {\\r\\n                rounded--;\\r\\n            }\\r\\n        }\\r\\n        return rounded;\\r\\n    }\\r\\n    else {\\r\\n        var d = Math.pow(10, precision);\\r\\n        return Math.round(value * d) / d;\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * Ceils the numeric value to whole number or specific precision of set.\\r\\n *\\r\\n * @param value      Value\\r\\n * @param precision  Precision (number of decimal points)\\r\\n * @return Rounded value\\r\\n */\\r\\nexport function ceil(value, precision) {\\r\\n    if (!$type.isNumber(precision) || precision <= 0) {\\r\\n        return Math.ceil(value);\\r\\n    }\\r\\n    else {\\r\\n        var d = Math.pow(10, precision);\\r\\n        return Math.ceil(value * d) / d;\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * Stretches `t` so that it will always be between `from` and `to`.\\r\\n *\\r\\n * @param t     Number from 0 to 1\\r\\n * @param from  Lowest possible value\\r\\n * @param to    Highest possible value\\r\\n * @return Adjusted value\\r\\n */\\r\\nexport function stretch(t, from, to) {\\r\\n    return (t * (to - from)) + from;\\r\\n}\\r\\n/**\\r\\n * Adjust numeric value so it fits to specific value range.\\r\\n *\\r\\n * @param value     Value\\r\\n * @param minValue  Lowest possible value\\r\\n * @param maxValue  Highest possible value\\r\\n * @return Adjusted value\\r\\n */\\r\\nexport function fitToRange(value, minValue, maxValue) {\\r\\n    if ($type.isNumber(minValue)) {\\r\\n        if ($type.isNumber(maxValue) && maxValue < minValue) {\\r\\n            var temp = maxValue;\\r\\n            maxValue = minValue;\\r\\n            minValue = temp;\\r\\n        }\\r\\n        if (value < minValue) {\\r\\n            value = minValue;\\r\\n        }\\r\\n    }\\r\\n    if ($type.isNumber(maxValue)) {\\r\\n        if (value > maxValue) {\\r\\n            value = maxValue;\\r\\n        }\\r\\n    }\\r\\n    return value;\\r\\n}\\r\\n/**\\r\\n * Returns sine of a number.\\r\\n *\\r\\n * @param value  Value\\r\\n * @return Sine\\r\\n */\\r\\nexport function sin(value) {\\r\\n    return round(Math.sin(RADIANS * value), 10);\\r\\n}\\r\\n/**\\r\\n * Returns tan of a number.\\r\\n *\\r\\n * @param value  Value\\r\\n * @return Sine\\r\\n */\\r\\nexport function tan(value) {\\r\\n    return round(Math.tan(RADIANS * value), 10);\\r\\n}\\r\\n/**\\r\\n * Returns cosine of a number.\\r\\n *\\r\\n * @param value  Value\\r\\n * @return Cosine\\r\\n */\\r\\nexport function cos(value) {\\r\\n    return round(Math.cos(RADIANS * value), 10);\\r\\n}\\r\\nexport function max(left, right) {\\r\\n    if ($type.isNumber(left)) {\\r\\n        if ($type.isNumber(right)) {\\r\\n            if (right > left) {\\r\\n                return right;\\r\\n            }\\r\\n            else {\\r\\n                return left;\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            return left;\\r\\n        }\\r\\n    }\\r\\n    else if ($type.isNumber(right)) {\\r\\n        return right;\\r\\n    }\\r\\n    else {\\r\\n        return null;\\r\\n    }\\r\\n}\\r\\nexport function min(left, right) {\\r\\n    if ($type.isNumber(left)) {\\r\\n        if ($type.isNumber(right)) {\\r\\n            if (right < left) {\\r\\n                return right;\\r\\n            }\\r\\n            else {\\r\\n                return left;\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            return left;\\r\\n        }\\r\\n    }\\r\\n    else if ($type.isNumber(right)) {\\r\\n        return right;\\r\\n    }\\r\\n    else {\\r\\n        return null;\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * Returns the closest value from the array of values to the reference value.\\r\\n *\\r\\n * @param values  Array of values\\r\\n * @param value   Reference value\\r\\n * @return Closes value from the array\\r\\n */\\r\\nexport function closest(values, referenceValue) {\\r\\n    return values.reduce(function (prev, curr) {\\r\\n        return (Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev);\\r\\n    });\\r\\n}\\r\\n/**\\r\\n * Checks whether two ranges of values intersect.\\r\\n *\\r\\n * @param range1  Range 1\\r\\n * @param range2  Range 2\\r\\n * @return Any intersecting numbers?\\r\\n */\\r\\nexport function intersect(range1, range2) {\\r\\n    var start1 = $type.getValue(range1.start);\\r\\n    var start2 = $type.getValue(range2.start);\\r\\n    var end1 = $type.getValue(range1.end);\\r\\n    var end2 = $type.getValue(range2.end);\\r\\n    return Math.max(start1, start2) <= Math.min(end1, end2);\\r\\n}\\r\\n/**\\r\\n * Inverts the range of values.\\r\\n *\\r\\n * @param range  Range\\r\\n */\\r\\nexport function invertRange(range) {\\r\\n    var start = $type.getValue(range.start);\\r\\n    var end = $type.getValue(range.end);\\r\\n    return { start: 1 - end, end: 1 - start };\\r\\n}\\r\\n/**\\r\\n * Returns an intersection range between two ranges of values.\\r\\n *\\r\\n * @param range1  Range 1\\r\\n * @param range2  Range 2\\r\\n * @return Intersecting value range\\r\\n */\\r\\nexport function intersection(range1, range2) {\\r\\n    var start1 = $type.getValue(range1.start);\\r\\n    var start2 = $type.getValue(range2.start);\\r\\n    var end1 = $type.getValue(range1.end);\\r\\n    var end2 = $type.getValue(range2.end);\\r\\n    var startMax = Math.max(start1, start2);\\r\\n    var endMin = Math.min(end1, end2);\\r\\n    if (endMin < startMax) {\\r\\n        return undefined;\\r\\n    }\\r\\n    else {\\r\\n        return { start: startMax, end: endMin };\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * Returns pixel \\\"distance\\\" between two points.\\r\\n *\\r\\n * If second point is not specified, distance from {x:0, y:0} point is\\r\\n * calculated.\\r\\n *\\r\\n * @param point1  Point 1\\r\\n * @param point2  Point 2\\r\\n * @return Distance in relative pixels\\r\\n */\\r\\nexport function getDistance(point1, point2) {\\r\\n    if (!point1) {\\r\\n        return 0;\\r\\n    }\\r\\n    if (!point2) {\\r\\n        point2 = { x: 0, y: 0 };\\r\\n    }\\r\\n    return Math.sqrt(Math.pow(Math.abs(point1.x - point2.x), 2) + Math.pow(Math.abs(point1.y - point2.y), 2));\\r\\n}\\r\\n/**\\r\\n * Returns scale based on original and end position of the two points.\\r\\n *\\r\\n * @param point1       Current position of point 1\\r\\n * @param startPoint1  Start position of point 1\\r\\n * @param point2       Current position of point 1\\r\\n * @param startPoint2  Start position of point 2\\r\\n * @return Scale        Calculated scale\\r\\n */\\r\\nexport function getScale(point1, startPoint1, point2, startPoint2) {\\r\\n    var initialDistance = getDistance(startPoint1, startPoint2);\\r\\n    var currentDistance = getDistance(point1, point2);\\r\\n    return Math.abs(currentDistance / initialDistance);\\r\\n}\\r\\n/**\\r\\n * Returns an exact mid point between two points.\\r\\n *\\r\\n * @param point1     Position of point 1\\r\\n * @param point2     Position of point 2\\r\\n * @return Mid point  Position of mid-point\\r\\n */\\r\\nexport function getMidPoint(point1, point2, position) {\\r\\n    if (!$type.isNumber(position)) {\\r\\n        position = 0.5;\\r\\n    }\\r\\n    return {\\r\\n        \\\"x\\\": (point1.x + (point2.x - point1.x) * position),\\r\\n        \\\"y\\\": (point1.y + (point2.y - point1.y) * position)\\r\\n    };\\r\\n}\\r\\n/**\\r\\n * Returns difference in angles between starting and ending position of two\\r\\n * vectors.\\r\\n *\\r\\n * @param point1       Current position of point 1\\r\\n * @param startPoint1  Start position of point 1\\r\\n * @param point2       Current position of point 1\\r\\n * @param startPoint2  Start position of point 2\\r\\n * @return Angle difference in degrees\\r\\n */\\r\\nexport function getRotation(point1, startPoint1, point2, startPoint2) {\\r\\n    // Get start and end angles\\r\\n    var startAngle = getAngle(startPoint1, startPoint2);\\r\\n    var angle = getAngle(point1, point2);\\r\\n    // Calculate angle\\r\\n    var diff = startAngle - angle;\\r\\n    if (diff < 0) {\\r\\n        diff += 360;\\r\\n    }\\r\\n    return diff;\\r\\n}\\r\\n/**\\r\\n * Calculates angle of the vector based on two or one point.\\r\\n *\\r\\n * @param point1  Point 1\\r\\n * @param point2  Point 2\\r\\n * @return Angle in degrees\\r\\n */\\r\\nexport function getAngle(point1, point2) {\\r\\n    if (!point2) {\\r\\n        point2 = { x: point1.x * 2, y: point1.y * 2 };\\r\\n    }\\r\\n    var diffX = point2.x - point1.x;\\r\\n    var diffY = point2.y - point1.y;\\r\\n    var angle = Math.atan2(diffY, diffX) * DEGREES;\\r\\n    if (angle < 0) {\\r\\n        angle += 360;\\r\\n    }\\r\\n    return normalizeAngle(angle);\\r\\n}\\r\\n/**\\r\\n * Returns the shift in coordinates of the center when item is rotated, moved\\r\\n * and scaled at the same time.\\r\\n *\\r\\n * @param center       Current center\\r\\n * @param point1       Frst reference point\\r\\n * @param startPoint1  Original position of the first reference point\\r\\n * @param point2       Second reference point\\r\\n * @param startPoint2  Original position of the first reference point\\r\\n * @return Shift in center point coordinates\\r\\n */\\r\\nexport function getCenterShift(center, point1, startPoint1, point2, startPoint2) {\\r\\n    // Get angle\\r\\n    var angle = getRotation(point1, startPoint1, point2, startPoint2) - 90;\\r\\n    if (angle < 0) {\\r\\n        angle += 360;\\r\\n    }\\r\\n    // Get distance between new position\\r\\n    var distance = getDistance(point1, point2);\\r\\n    // Calculate new X\\r\\n    var x = Math.cos(angle) / distance + point1.x;\\r\\n    var y = Math.cos(angle) / distance + point1.y;\\r\\n    var shift = {\\r\\n        \\\"x\\\": x - center.x,\\r\\n        \\\"y\\\": y - center.y\\r\\n    };\\r\\n    return shift;\\r\\n}\\r\\n/**\\r\\n * Converts an array of points into a bounding box rectangle.\\r\\n *\\r\\n * Array can contain any number of points.\\r\\n *\\r\\n * @param points  Points\\r\\n * @return Bounding box rectangle\\r\\n */\\r\\nexport function getBBox(points) {\\r\\n    if (points) {\\r\\n        var length_1 = points.length;\\r\\n        if (length_1 !== 0) {\\r\\n            var left = void 0;\\r\\n            var right = void 0;\\r\\n            var top_1;\\r\\n            var bottom = void 0;\\r\\n            for (var i = 0; i < length_1; i++) {\\r\\n                var point = points[i];\\r\\n                if (!$type.isNumber(right) || (point.x > right)) {\\r\\n                    right = point.x;\\r\\n                }\\r\\n                if (!$type.isNumber(left) || (point.x < left)) {\\r\\n                    left = point.x;\\r\\n                }\\r\\n                if (!$type.isNumber(top_1) || (point.y < top_1)) {\\r\\n                    top_1 = point.y;\\r\\n                }\\r\\n                if (!$type.isNumber(bottom) || (point.y > bottom)) {\\r\\n                    bottom = point.y;\\r\\n                }\\r\\n            }\\r\\n            return { x: left, y: top_1, width: right - left, height: bottom - top_1 };\\r\\n        }\\r\\n    }\\r\\n    return { x: 0, y: 0, width: 0, height: 0 };\\r\\n}\\r\\n/**\\r\\n * Returns a [[IRectangle]] object representing a common rectangle that fits\\r\\n * all passed in rectangles in it.\\r\\n *\\r\\n * @param rectangles  An array of rectangles\\r\\n * @return Common rectangle\\r\\n */\\r\\nexport function getCommonRectangle(rectangles) {\\r\\n    var length = rectangles.length;\\r\\n    if (length !== 0) {\\r\\n        var minX = void 0;\\r\\n        var minY = void 0;\\r\\n        var maxX = void 0;\\r\\n        var maxY = void 0;\\r\\n        for (var i = 0; i < length; i++) {\\r\\n            var rectangle = rectangles[i];\\r\\n            minX = min(rectangle.x, minX);\\r\\n            minY = min(rectangle.y, minY);\\r\\n            maxX = max(rectangle.x + rectangle.width, maxX);\\r\\n            maxY = max(rectangle.y + rectangle.height, maxY);\\r\\n        }\\r\\n        return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };\\r\\n    }\\r\\n}\\r\\n/**\\r\\n * [getPointOnQuadraticCurve description]\\r\\n *\\r\\n * @ignore Exclude from docs\\r\\n * @todo Description\\r\\n * @param pointA        [description]\\r\\n * @param pointB        [description]\\r\\n * @param controlPoint  [description]\\r\\n * @param position      [description]\\r\\n * @return [description]\\r\\n */\\r\\nexport function getPointOnQuadraticCurve(pointA, pointB, controlPoint, position) {\\r\\n    var x = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;\\r\\n    var y = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;\\r\\n    return { x: x, y: y };\\r\\n}\\r\\n/**\\r\\n * [getPointOnCubicCurve description]\\r\\n *\\r\\n * @ignore Exclude from docs\\r\\n * @todo Description\\r\\n * @param pointA         [description]\\r\\n * @param pointB         [description]\\r\\n * @param controlPointA  [description]\\r\\n * @param controlPointB  [description]\\r\\n * @param position       [description]\\r\\n * @return [description]\\r\\n */\\r\\nexport function getPointOnCubicCurve(pointA, pointB, controlPointA, controlPointB, position) {\\r\\n    var point = { x: 0, y: 0 };\\r\\n    var mt1 = 1 - position;\\r\\n    var mt2 = mt1 * mt1;\\r\\n    var mt3 = mt2 * mt1;\\r\\n    point.x = pointA.x * mt3 + controlPointA.x * 3 * mt2 * position + controlPointB.x * 3 * mt1 * position * position + pointB.x * position * position * position;\\r\\n    point.y = pointA.y * mt3 + controlPointA.y * 3 * mt2 * position + controlPointB.y * 3 * mt1 * position * position + pointB.y * position * position * position;\\r\\n    return point;\\r\\n}\\r\\n/**\\r\\n * [getCubicControlPointA description]\\r\\n *\\r\\n * @ignore Exclude from docs\\r\\n * @todo Description\\r\\n * @param p0        [description]\\r\\n * @param p1        [description]\\r\\n * @param p2        [description]\\r\\n * @param p3        [description]\\r\\n * @param tensionX  [description]\\r\\n * @param tensionY  [description]\\r\\n * @return [description]\\r\\n */\\r\\nexport function getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY) {\\r\\n    tensionX = adjustTension(tensionX);\\r\\n    tensionY = adjustTension(tensionY);\\r\\n    return { x: ((-p0.x + p1.x / tensionX + p2.x) * tensionX), y: ((-p0.y + p1.y / tensionY + p2.y) * tensionY) };\\r\\n}\\r\\n/**\\r\\n * [getCubicControlPointB description]\\r\\n *\\r\\n * @ignore Exclude from docs\\r\\n * @todo Description\\r\\n * @param p0        [description]\\r\\n * @param p1        [description]\\r\\n * @param p2        [description]\\r\\n * @param p3        [description]\\r\\n * @param tensionX  [description]\\r\\n * @param tensionY  [description]\\r\\n * @return [description]\\r\\n */\\r\\nexport function getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY) {\\r\\n    tensionX = adjustTension(tensionX);\\r\\n    tensionY = adjustTension(tensionY);\\r\\n    return { x: ((p1.x + p2.x / tensionX - p3.x) * tensionX), y: ((p1.y + p2.y / tensionY - p3.y) * tensionY) };\\r\\n}\\r\\n/**\\r\\n * [adjustTension description]\\r\\n *\\r\\n * @ignore Exclude from docs\\r\\n * @todo Description\\r\\n * @param tension  [description]\\r\\n * @return [description]\\r\\n */\\r\\nexport function adjustTension(tension) {\\r\\n    return 1 - tension + 0.00001;\\r\\n}\\r\\n/**\\r\\n * [normalizeAngle description]\\r\\n *\\r\\n * @ignore Exclude from docs\\r\\n * @todo Description\\r\\n * @param value  [description]\\r\\n * @return [description]\\r\\n */\\r\\nexport function normalizeAngle(value) {\\r\\n    if (value == 360) {\\r\\n        return 360;\\r\\n    }\\r\\n    return value % 360;\\r\\n}\\r\\n/**\\r\\n * [normalizeAngleToRange description]\\r\\n *\\r\\n * @ignore Exclude from docs\\r\\n * @todo Description\\r\\n * @todo review this with various angles, can be tested on radar chart with custom start/end angles\\r\\n * @param value       [description]\\r\\n * @param startAngle  [description]\\r\\n * @param endAngle    [description]\\r\\n * @return [description]\\r\\n */\\r\\nexport function fitAngleToRange(value, startAngle, endAngle) {\\r\\n    if (startAngle > endAngle) {\\r\\n        var temp = startAngle;\\r\\n        startAngle = endAngle;\\r\\n        endAngle = temp;\\r\\n    }\\r\\n    value = normalizeAngle(value);\\r\\n    var count = (startAngle - normalizeAngle(startAngle)) / 360;\\r\\n    if (value < startAngle) {\\r\\n        value += 360 * (count + 1);\\r\\n    }\\r\\n    var maxEnd = startAngle + (endAngle - startAngle) / 2 + 180;\\r\\n    var maxStart = startAngle + (endAngle - startAngle) / 2 - 180;\\r\\n    if (value > endAngle) {\\r\\n        if (value - 360 > startAngle) {\\r\\n            value -= 360;\\r\\n        }\\r\\n        else {\\r\\n            if (value < maxEnd) {\\r\\n                value = endAngle;\\r\\n            }\\r\\n            else {\\r\\n                value = startAngle;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    if (value < startAngle) {\\r\\n        if (value > maxStart) {\\r\\n            value = startAngle;\\r\\n        }\\r\\n        else {\\r\\n            value = endAngle;\\r\\n        }\\r\\n    }\\r\\n    return value;\\r\\n}\\r\\n/**\\r\\n * Returns [[IRectangle]] of an arc in relative values, assuming that the\\r\\n * center is at the circle center.\\r\\n *\\r\\n * Used to find out max radius of an arc.\\r\\n *\\r\\n * @ignore Exclude from docs\\r\\n * @param startAngle  Start angle\\r\\n * @param endAngle    End angle\\r\\n * @param radius    \\t Relative radius\\r\\n * @return Rectangle\\r\\n */\\r\\nexport function getArcRect(startAngle, endAngle, radius) {\\r\\n    var minX = Number.MAX_VALUE;\\r\\n    var minY = Number.MAX_VALUE;\\r\\n    var maxX = -Number.MAX_VALUE;\\r\\n    var maxY = -Number.MAX_VALUE;\\r\\n    var bpoints = [];\\r\\n    if (!$type.isNumber(radius)) {\\r\\n        radius = 1;\\r\\n    }\\r\\n    bpoints.push(getArcPoint(radius, startAngle));\\r\\n    bpoints.push(getArcPoint(radius, endAngle));\\r\\n    var fromAngle = Math.min(Math.floor(startAngle / 90) * 90, Math.floor(endAngle / 90) * 90);\\r\\n    var toAngle = Math.max(Math.ceil(startAngle / 90) * 90, Math.ceil(endAngle / 90) * 90);\\r\\n    for (var angle = fromAngle; angle <= toAngle; angle += 90) {\\r\\n        if (angle >= startAngle && angle <= endAngle) {\\r\\n            bpoints.push(getArcPoint(radius, angle));\\r\\n        }\\r\\n    }\\r\\n    for (var i = 0; i < bpoints.length; i++) {\\r\\n        var pt = bpoints[i];\\r\\n        if (pt.x < minX) {\\r\\n            minX = pt.x;\\r\\n        }\\r\\n        if (pt.y < minY) {\\r\\n            minY = pt.y;\\r\\n        }\\r\\n        if (pt.x > maxX) {\\r\\n            maxX = pt.x;\\r\\n        }\\r\\n        if (pt.y > maxY) {\\r\\n            maxY = pt.y;\\r\\n        }\\r\\n    }\\r\\n    return ({ x: minX, y: minY, width: maxX - minX, height: maxY - minY });\\r\\n}\\r\\n/**\\r\\n * Returns point on arc\\r\\n *\\r\\n * @param center point\\r\\n * @param radius\\r\\n * @param arc\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function getArcPoint(radius, arc) {\\r\\n    return ({ x: radius * cos(arc), y: radius * sin(arc) });\\r\\n}\\r\\n/**\\r\\n * Returns true if a point is within rectangle\\r\\n *\\r\\n * @param point\\r\\n * @param rectangle\\r\\n * @return {boolean}\\r\\n */\\r\\nexport function isInRectangle(point, rectangle) {\\r\\n    if (point.x >= rectangle.x && point.x <= rectangle.x + rectangle.width && point.y > rectangle.y && point.y < rectangle.y + rectangle.height) {\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\nexport function getLineIntersection(pointA1, pointA2, pointB1, pointB2) {\\r\\n    var x = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.x - pointB2.x) - (pointA1.x - pointA2.x) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\\r\\n    var y = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\\r\\n    return { x: x, y: y };\\r\\n}\\r\\n//# sourceMappingURL=Math.js.map\"]}","code":"(window[\"webpackJsonp\"]=window[\"webpackJsonp\"]||[]).push([[\"chunk-57a82310\"],{\"2b87\":function(n,t,r){\"use strict\";r.d(t,\"a\",function(){return u}),r.d(t,\"c\",function(){return e}),r.d(t,\"b\",function(){return i});var u=function(){function n(n){this._value=n}return Object.defineProperty(n.prototype,\"value\",{get:function(){return this._value/100},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,\"percent\",{get:function(){return this._value},enumerable:!0,configurable:!0}),n.prototype.toString=function(){return this._value+\"%\"},n}();function e(n){return new u(n)}function i(n){return n instanceof u}},\"916c\":function(n,t,r){\"use strict\";r.d(t,\"g\",function(){return e}),r.d(t,\"a\",function(){return o}),r.d(t,\"k\",function(){return f}),r.d(t,\"l\",function(){return c}),r.d(t,\"n\",function(){return a}),r.d(t,\"m\",function(){return d}),r.d(t,\"d\",function(){return h}),r.d(t,\"b\",function(){return y}),r.d(t,\"c\",function(){return x}),r.d(t,\"f\",function(){return b}),r.d(t,\"j\",function(){return v}),r.d(t,\"h\",function(){return s}),r.d(t,\"i\",function(){return M}),r.d(t,\"e\",function(){return l});var u=r(\"2b87\");function e(n){return Number(n)!==n}function i(n){return{}.toString.call(n)}function o(n){if(\"string\"===typeof n)return n;if(\"number\"===typeof n)return\"\"+n;throw new Error(\"Expected a string or number but got \"+i(n))}function f(n){return!!n}function c(n){if(h(n)&&!s(n)){var t=Number(n);return e(t)&&v(n)&&\"\"!=n?c(n.replace(/[^0-9.\\-]+/g,\"\")):t}return n}function a(n){if(h(n)&&!v(n)){if(s(n))return o(n);if(M(n))return n.toString()}return n}function d(n){return!h(n)||s(n)||Object(u[\"b\"])(n)?n:v(n)&&-1!=n.indexOf(\"%\")?Object(u[\"c\"])(c(n)):c(n)}function h(n){return null!=n}function y(n){if(h(n))return n;throw new Error(\"Value doesn't exist\")}function x(n,t){return h(n)?n:t}function b(n){return\"[object Date]\"===i(n)}function v(n){return\"string\"===typeof n}function s(n){return\"number\"===typeof n&&Number(n)==n}function M(n){return\"object\"===typeof n}function l(n){return Array.isArray(n)}},baa2:function(n,t,r){\"use strict\";r.d(t,\"c\",function(){return e}),r.d(t,\"b\",function(){return i}),r.d(t,\"d\",function(){return o}),r.d(t,\"a\",function(){return f}),r.d(t,\"E\",function(){return c}),r.d(t,\"B\",function(){return a}),r.d(t,\"e\",function(){return d}),r.d(t,\"i\",function(){return h}),r.d(t,\"C\",function(){return y}),r.d(t,\"D\",function(){return x}),r.d(t,\"g\",function(){return b}),r.d(t,\"y\",function(){return v}),r.d(t,\"z\",function(){return s}),r.d(t,\"f\",function(){return M}),r.d(t,\"u\",function(){return l}),r.d(t,\"w\",function(){return p}),r.d(t,\"v\",function(){return g}),r.d(t,\"p\",function(){return w}),r.d(t,\"t\",function(){return m}),r.d(t,\"q\",function(){return A}),r.d(t,\"j\",function(){return j}),r.d(t,\"l\",function(){return E}),r.d(t,\"m\",function(){return _}),r.d(t,\"s\",function(){return N}),r.d(t,\"r\",function(){return k}),r.d(t,\"n\",function(){return O}),r.d(t,\"o\",function(){return V}),r.d(t,\"A\",function(){return U}),r.d(t,\"h\",function(){return X}),r.d(t,\"k\",function(){return P}),r.d(t,\"x\",function(){return q});var u=r(\"916c\"),e=Math.PI,i=e/2,o=e/180,f=180/e;function c(n,t,r){return u[\"d\"](n)?(n=u[\"l\"](n),h(n,t,r)):n}function a(n,t,r){if(!u[\"h\"](t)||t<=0){var e=Math.round(n);return r&&e-n==.5&&e--,e}var i=Math.pow(10,t);return Math.round(n*i)/i}function d(n,t){if(!u[\"h\"](t)||t<=0)return Math.ceil(n);var r=Math.pow(10,t);return Math.ceil(n*r)/r}function h(n,t,r){if(u[\"h\"](t)){if(u[\"h\"](r)&&r<t){var e=r;r=t,t=e}n<t&&(n=t)}return u[\"h\"](r)&&n>r&&(n=r),n}function y(n){return a(Math.sin(o*n),10)}function x(n){return a(Math.tan(o*n),10)}function b(n){return a(Math.cos(o*n),10)}function v(n,t){return u[\"h\"](n)?u[\"h\"](t)&&t>n?t:n:u[\"h\"](t)?t:null}function s(n,t){return u[\"h\"](n)?u[\"h\"](t)&&t<n?t:n:u[\"h\"](t)?t:null}function M(n,t){return n.reduce(function(n,r){return Math.abs(r-t)<Math.abs(n-t)?r:n})}function l(n,t){var r=u[\"b\"](n.start),e=u[\"b\"](t.start),i=u[\"b\"](n.end),o=u[\"b\"](t.end);return Math.max(r,e)<=Math.min(i,o)}function p(n){var t=u[\"b\"](n.start),r=u[\"b\"](n.end);return{start:1-r,end:1-t}}function g(n,t){var r=u[\"b\"](n.start),e=u[\"b\"](t.start),i=u[\"b\"](n.end),o=u[\"b\"](t.end),f=Math.max(r,e),c=Math.min(i,o);return c<f?void 0:{start:f,end:c}}function w(n,t){return n?(t||(t={x:0,y:0}),Math.sqrt(Math.pow(Math.abs(n.x-t.x),2)+Math.pow(Math.abs(n.y-t.y),2))):0}function m(n,t,r,u){var e=w(t,u),i=w(n,r);return Math.abs(i/e)}function A(n,t,r){return u[\"h\"](r)||(r=.5),{x:n.x+(t.x-n.x)*r,y:n.y+(t.y-n.y)*r}}function j(n,t){t||(t={x:2*n.x,y:2*n.y});var r=t.x-n.x,u=t.y-n.y,e=Math.atan2(u,r)*f;return e<0&&(e+=360),U(e)}function E(n){if(n){var t=n.length;if(0!==t){for(var r,e=void 0,i=void 0,o=void 0,f=0;f<t;f++){var c=n[f];(!u[\"h\"](i)||c.x>i)&&(i=c.x),(!u[\"h\"](e)||c.x<e)&&(e=c.x),(!u[\"h\"](r)||c.y<r)&&(r=c.y),(!u[\"h\"](o)||c.y>o)&&(o=c.y)}return{x:e,y:r,width:i-e,height:o-r}}}return{x:0,y:0,width:0,height:0}}function _(n){var t=n.length;if(0!==t){for(var r=void 0,u=void 0,e=void 0,i=void 0,o=0;o<t;o++){var f=n[o];r=s(f.x,r),u=s(f.y,u),e=v(f.x+f.width,e),i=v(f.y+f.height,i)}return{x:r,y:u,width:e-r,height:i-u}}}function N(n,t,r,u){var e=(1-u)*(1-u)*n.x+2*(1-u)*u*r.x+u*u*t.x,i=(1-u)*(1-u)*n.y+2*(1-u)*u*r.y+u*u*t.y;return{x:e,y:i}}function k(n,t,r,u,e){var i={x:0,y:0},o=1-e,f=o*o,c=f*o;return i.x=n.x*c+3*r.x*f*e+3*u.x*o*e*e+t.x*e*e*e,i.y=n.y*c+3*r.y*f*e+3*u.y*o*e*e+t.y*e*e*e,i}function O(n,t,r,u,e,i){return e=L(e),i=L(i),{x:(-n.x+t.x/e+r.x)*e,y:(-n.y+t.y/i+r.y)*i}}function V(n,t,r,u,e,i){return e=L(e),i=L(i),{x:(t.x+r.x/e-u.x)*e,y:(t.y+r.y/i-u.y)*i}}function L(n){return 1-n+1e-5}function U(n){return 360==n?360:n%360}function X(n,t,r){if(t>r){var u=t;t=r,r=u}n=U(n);var e=(t-U(t))/360;n<t&&(n+=360*(e+1));var i=t+(r-t)/2+180,o=t+(r-t)/2-180;return n>r&&(n-360>t?n-=360:n=n<i?r:t),n<t&&(n=n>o?t:r),n}function P(n,t,r){var e=Number.MAX_VALUE,i=Number.MAX_VALUE,o=-Number.MAX_VALUE,f=-Number.MAX_VALUE,c=[];u[\"h\"](r)||(r=1),c.push(S(r,n)),c.push(S(r,t));for(var a=Math.min(90*Math.floor(n/90),90*Math.floor(t/90)),d=Math.max(90*Math.ceil(n/90),90*Math.ceil(t/90)),h=a;h<=d;h+=90)h>=n&&h<=t&&c.push(S(r,h));for(var y=0;y<c.length;y++){var x=c[y];x.x<e&&(e=x.x),x.y<i&&(i=x.y),x.x>o&&(o=x.x),x.y>f&&(f=x.y)}return{x:e,y:i,width:o-e,height:f-i}}function S(n,t){return{x:n*b(t),y:n*y(t)}}function q(n,t){return n.x>=t.x&&n.x<=t.x+t.width&&n.y>t.y&&n.y<t.y+t.height}}}]);","extractedComments":[]}